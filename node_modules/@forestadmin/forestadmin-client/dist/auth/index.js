"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const openid_client_1 = require("openid-client");
const errors_1 = require("./errors");
const server_1 = __importDefault(require("../utils/server"));
class AuthService {
    constructor(options) {
        this.options = options;
    }
    /**
     * Initialize the authentication client upfront. This speeds up the first
     * authentication request.
     */
    async init() {
        try {
            await this.createClient();
        }
        catch (e) {
            // Sometimes the authentication client can't be initialized because of a
            // server or network error. We don't want the application to crash.
            this.options.logger('Warn', 
            // eslint-disable-next-line max-len
            `Error while registering the authentication client. Authentication might not work: ${e.message}`);
        }
    }
    async getUserInfo(renderingId, accessToken) {
        const url = `/liana/v2/renderings/${renderingId}/authorization`;
        const headers = { 'forest-token': accessToken };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const response = await server_1.default.query(this.options, 'get', url, headers);
        return {
            id: Number(response.data.id),
            email: response.data.attributes.email,
            firstName: response.data.attributes.first_name,
            lastName: response.data.attributes.last_name,
            team: response.data.attributes.teams[0],
            role: response.data.attributes.role,
            permissionLevel: response.data.attributes.permission_level,
            renderingId,
            tags: response.data.attributes.tags?.reduce((memo, { key, value }) => ({ ...memo, [key]: value }), {}),
        };
    }
    async generateAuthorizationUrl({ scope, state, }) {
        await this.createClient();
        return this.client.authorizationUrl({
            scope,
            state,
        });
    }
    async generateTokens({ query, state, }) {
        await this.createClient();
        try {
            const tokens = await this.client.callback(undefined, query, { state });
            return {
                accessToken: tokens.access_token,
            };
        }
        catch (e) {
            this.handleError(e);
        }
    }
    async createClient() {
        if (this.client)
            return;
        // We can't use async 'Issuer.discover' because the oidc config is behind an auth-wall.
        const url = '/oidc/.well-known/openid-configuration';
        const config = await server_1.default.query(this.options, 'get', url);
        const issuer = new openid_client_1.Issuer(config);
        const registration = { token_endpoint_auth_method: 'none' };
        this.client = await issuer.Client.register(registration, {
            initialAccessToken: this.options.envSecret,
        });
    }
    handleError(e) {
        if (e instanceof openid_client_1.errors.OPError) {
            throw new errors_1.AuthenticationError(e);
        }
        throw e;
    }
}
exports.default = AuthService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXV0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlEQUE2RjtBQUc3RixxQ0FBK0M7QUFJL0MsNkRBQTBDO0FBRTFDLE1BQXFCLFdBQVc7SUFHOUIsWUFBb0IsT0FBNkM7UUFBN0MsWUFBTyxHQUFQLE9BQU8sQ0FBc0M7SUFBRyxDQUFDO0lBRXJFOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSTtZQUNGLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzNCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVix3RUFBd0U7WUFDeEUsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUNqQixNQUFNO1lBQ04sbUNBQW1DO1lBQ25DLHFGQUFxRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQ2pHLENBQUM7U0FDSDtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQW1CLEVBQUUsV0FBbUI7UUFDL0QsTUFBTSxHQUFHLEdBQUcsd0JBQXdCLFdBQVcsZ0JBQWdCLENBQUM7UUFDaEUsTUFBTSxPQUFPLEdBQUcsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFFaEQsOERBQThEO1FBQzlELE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQVcsQ0FBQyxLQUFLLENBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRWpGLE9BQU87WUFDTCxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzVCLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLO1lBQ3JDLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVO1lBQzlDLFFBQVEsRUFB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