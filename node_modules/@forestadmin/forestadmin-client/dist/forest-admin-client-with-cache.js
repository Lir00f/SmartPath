"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const verify_approval_1 = __importDefault(require("./permissions/verify-approval"));
class ForestAdminClientWithCache {
    constructor(options, permissionService, renderingPermissionService, contextVariablesInstantiator, chartHandler, ipWhitelistService, schemaService, authService, modelCustomizationService, eventsSubscription, eventsHandler) {
        this.options = options;
        this.permissionService = permissionService;
        this.renderingPermissionService = renderingPermissionService;
        this.contextVariablesInstantiator = contextVariablesInstantiator;
        this.chartHandler = chartHandler;
        this.ipWhitelistService = ipWhitelistService;
        this.schemaService = schemaService;
        this.authService = authService;
        this.modelCustomizationService = modelCustomizationService;
        this.eventsSubscription = eventsSubscription;
        this.eventsHandler = eventsHandler;
    }
    verifySignedActionParameters(signedParameters) {
        return (0, verify_approval_1.default)(signedParameters, this.options.envSecret);
    }
    getIpWhitelistConfiguration() {
        return this.ipWhitelistService.getConfiguration();
    }
    async postSchema(schema) {
        return this.schemaService.postSchema(schema);
    }
    async getScope({ renderingId, userId, collectionName, }) {
        return this.renderingPermissionService.getScope({
            renderingId,
            collectionName,
            userId,
        });
    }
    markScopesAsUpdated(renderingId) {
        if (!this.options.instantCacheRefresh)
            this.renderingPermissionService.invalidateCache(renderingId);
    }
    async subscribeToServerEvents() {
        await this.eventsSubscription.subscribeEvents();
    }
    close() {
        this.eventsSubscription.close();
    }
    onRefreshCustomizations(handler) {
        this.eventsHandler.onRefreshCustomizations(handler);
    }
}
exports.default = ForestAdminClientWithCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yZXN0LWFkbWluLWNsaWVudC13aXRoLWNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZvcmVzdC1hZG1pbi1jbGllbnQtd2l0aC1jYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVVBLG9GQUFxRTtBQVdyRSxNQUFxQiwwQkFBMEI7SUFDN0MsWUFDcUIsT0FBNkMsRUFDaEQsaUJBQW9DLEVBQ2pDLDBCQUFzRCxFQUN6RCw0QkFBMEQsRUFDMUQsWUFBMEIsRUFDdkIsa0JBQXNDLEVBQ3RDLGFBQTRCLEVBQy9CLFdBQTRDLEVBQzVDLHlCQUFvRCxFQUNqRCxrQkFBaUQsRUFDakQsYUFBMEM7UUFWMUMsWUFBTyxHQUFQLE9BQU8sQ0FBc0M7UUFDaEQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNqQywrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBQ3pELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUFDMUQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDdkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBaUM7UUFDNUMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQUNqRCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQStCO1FBQ2pELGtCQUFhLEdBQWIsYUFBYSxDQUE2QjtJQUM1RCxDQUFDO0lBRUosNEJBQTRCLENBQW9CLGdCQUF3QjtRQUN0RSxPQUFPLElBQUEseUJBQXdCLEVBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsMkJBQTJCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBb0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUNwQixXQUFXLEVBQ1gsTUFBTSxFQUNOLGNBQWMsR0FLZjtRQUNDLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQztZQUM5QyxXQUFXO1lBQ1gsY0FBYztZQUNkLE1BQU07U0FDUCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sbUJBQW1CLENBQUMsV0FBNEI7UUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CO1lBQ25DLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLEtBQUssQ0FBQyx1QkFBdUI7UUFDbEMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVNLHVCQUF1QixDQUFDLE9BQW1DO1FBQ2hFLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNGO0FBM0RELDZDQTJEQyJ9