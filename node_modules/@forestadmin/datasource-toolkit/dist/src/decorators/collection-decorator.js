"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CollectionDecorator {
    get nativeDriver() {
        return this.childCollection.nativeDriver;
    }
    get schema() {
        if (!this.lastSchema) {
            // If the schema is not cached (at the first call, or after a markSchemaAsDirty call),
            const subSchema = this.childCollection.schema;
            this.lastSchema = this.refineSchema(subSchema);
        }
        return this.lastSchema;
    }
    get name() {
        return this.childCollection.name;
    }
    constructor(childCollection, dataSource) {
        this.childCollection = childCollection;
        this.dataSource = dataSource;
        // When the child collection invalidates its schema, we also invalidate ours.
        // This is done like this, and not in the markSchemaAsDirty method, because we don't have
        // a reference to parent collections from children.
        if (childCollection instanceof CollectionDecorator) {
            const originalChildMarkSchemaAsDirty = childCollection.markSchemaAsDirty;
            childCollection.markSchemaAsDirty = () => {
                // Call the original method (the child)
                originalChildMarkSchemaAsDirty.call(childCollection);
                // Invalidate our schema (the parent)
                this.markSchemaAsDirty();
            };
        }
    }
    async execute(caller, name, data, filter) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.execute(caller, name, data, refinedFilter);
    }
    async getForm(caller, name, data, filter, metas) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.getForm(caller, name, data, refinedFilter, metas);
    }
    async create(caller, data) {
        return this.childCollection.create(caller, data);
    }
    async list(caller, filter, projection) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.list(caller, refinedFilter, projection);
    }
    async update(caller, filter, patch) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.update(caller, refinedFilter, patch);
    }
    async delete(caller, filter) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.delete(caller, refinedFilter);
    }
    async aggregate(caller, filter, aggregation, limit) {
        const refinedFilter = await this.refineFilter(caller, filter);
        return this.childCollection.aggregate(caller, refinedFilter, aggregation, limit);
    }
    async renderChart(caller, name, recordId) {
        return this.childCollection.renderChart(caller, name, recordId);
    }
    markSchemaAsDirty() {
        this.lastSchema = null;
    }
    async refineFilter(caller, filter) {
        return filter;
    }
    refineSchema(subSchema) {
        return subSchema;
    }
}
exports.default = CollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi1kZWNvcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9jb2xsZWN0aW9uLWRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLE1BQXFCLG1CQUFtQjtJQU10QyxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixzRkFBc0Y7WUFDdEYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7WUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFRCxZQUFZLGVBQTJCLEVBQUUsVUFBc0I7UUFDN0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFFN0IsNkVBQTZFO1FBQzdFLHlGQUF5RjtRQUN6RixtREFBbUQ7UUFDbkQsSUFBSSxlQUFlLFlBQVksbUJBQW1CLEVBQUU7WUFDbEQsTUFBTSw4QkFBOEIsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUM7WUFFekUsZUFBZSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtnQkFDdkMsdUNBQXVDO2dCQUN2Qyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBRXJELHFDQUFxQztnQkFDckMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDM0IsQ0FBQyxDQUFDO1NB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