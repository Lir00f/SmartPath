"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_tester_1 = __importDefault(require("./connection-tester"));
const handle_errors_1 = __importDefault(require("./handle-errors"));
const sequelize_factory_1 = __importDefault(require("./sequelize-factory"));
const reverse_proxy_1 = __importDefault(require("./services/reverse-proxy"));
const socks_proxy_1 = __importDefault(require("./services/socks-proxy"));
const ssh_tunnel_1 = __importDefault(require("./services/ssh-tunnel"));
/** Attempt to connect to the database */
async function connect(options) {
    let socksProxy;
    let sshTunnel;
    let reverseProxy;
    let sequelize;
    try {
        if (options.proxyOptions || options.sshOptions) {
            reverseProxy = new reverse_proxy_1.default();
            await reverseProxy.start();
        }
        if (options.proxyOptions) {
            // destination is the ssh server or the database
            const { host, port } = options.sshOptions ?? options;
            socksProxy = new socks_proxy_1.default(options.proxyOptions, host, port);
            reverseProxy.link(socksProxy);
        }
        if (options.sshOptions) {
            const { host, port, sshOptions } = options;
            // database is the destination
            sshTunnel = new ssh_tunnel_1.default(sshOptions, host, port);
            // if socksProxy is defined, it means that we are using a proxy
            // so we need to link to the socksProxy otherwise to the reverseProxy
            (socksProxy ?? reverseProxy).link(sshTunnel);
        }
        // change the host and port of the sequelize options to point to the reverse proxy
        if (reverseProxy)
            options.changeHostAndPort(reverseProxy.host, reverseProxy.port);
        sequelize = sequelize_factory_1.default.build(await options.buildSequelizeCtorOptions(), 
        // stop the reverse proxy when the sequelize connection is closed
        reverseProxy?.stop.bind(reverseProxy));
        await (0, connection_tester_1.default)(sequelize, options.debugDatabaseUri, options.connectionTimeoutInMs);
        return sequelize;
    }
    catch (e) {
        await sequelize?.close();
        // if ssh or socksProxy or reverseProxy encountered an error,
        // we want to throw it instead of the sequelize error
        (0, handle_errors_1.default)(sshTunnel?.error ?? socksProxy?.error ?? reverseProxy?.error ?? e, options);
    }
}
exports.default = connect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ubmVjdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDRFQUE0RDtBQUM1RCxvRUFBMkM7QUFDM0MsNEVBQW1EO0FBQ25ELDZFQUFvRDtBQUNwRCx5RUFBZ0Q7QUFDaEQsdUVBQThDO0FBRTlDLHlDQUF5QztBQUMxQixLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQTBCO0lBQzlELElBQUksVUFBc0IsQ0FBQztJQUMzQixJQUFJLFNBQW9CLENBQUM7SUFDekIsSUFBSSxZQUEwQixDQUFDO0lBQy9CLElBQUksU0FBb0IsQ0FBQztJQUV6QixJQUFJO1FBQ0YsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDOUMsWUFBWSxHQUFHLElBQUksdUJBQVksRUFBRSxDQUFDO1lBQ2xDLE1BQU0sWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzVCO1FBRUQsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3hCLGdEQUFnRDtZQUNoRCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDO1lBQ3JELFVBQVUsR0FBRyxJQUFJLHFCQUFVLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDOUQsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjtRQUVELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN0QixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFDM0MsOEJBQThCO1lBQzlCLFNBQVMsR0FBRyxJQUFJLG9CQUFTLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCwrREFBK0Q7WUFDL0QscUVBQXFFO1lBQ3JFLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM5QztRQUVELGtGQUFrRjtRQUNsRixJQUFJLFlBQVk7WUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEYsU0FBUyxHQUFHLDJCQUFnQixDQUFDLEtBQUssQ0FDaEMsTUFBTSxPQUFPLENBQUMseUJBQXlCLEVBQUU7UUFDekMsaUVBQWlFO1FBQ2pFLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUN0QyxDQUFDO1FBRUYsTUFBTSxJQUFBLDJCQUF5QixFQUM3QixTQUFTLEVBQ1QsT0FBTyxDQUFDLGdCQUFnQixFQUN4QixPQUFPLENBQUMscUJBQXFCLENBQzlCLENBQUM7UUFFRixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDekIsNkRBQTZEO1FBQzdELHFEQUFxRDtRQUNyRCxJQUFBLHVCQUFZLEVBQUMsU0FBUyxFQUFFLEtBQUssSUFBSSxVQUFVLEVBQUUsS0FBSyxJQUFJLFlBQVksRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzFGO0FBQ0gsQ0FBQztBQWxERCwwQkFrREMifQ==