import { Logger } from '@forestadmin/datasource-toolkit';
import { Dialect, Options as SequelizeOptions } from 'sequelize';
import { PlainConnectionOptions, PlainConnectionOptionsOrUri, ProxyOptions, SshOptions } from '../types';
/**
 * Connection options.
 * This wrapper is constructed from a plain object or a URI string.
 *
 * It is capable of parsing them, and providing an interface to the rest of the code to:
 * - Build parameters to create sequelize instances
 * - Build connections options with both dialect and sslmode resolved (for quick startup in cloud)
 * - Provide safe urls for error messages (without credentials)
 * - Play with the host and port without breaking SSL servername / error messages (for the proxy)
 */
export default class ConnectionOptions {
    proxyOptions?: ProxyOptions;
    sshOptions?: SshOptions;
    connectionTimeoutInMs?: number;
    private initialHost;
    private initialPort;
    private logger?;
    private sequelizeOptions;
    private sslMode;
    private uri?;
    /**
     * Database URI without credentials, which can be used in error messages.
     * Ensure that this is never substituted by the proxy, nor that it includes credentials.
     */
    get debugDatabaseUri(): string;
    get dialect(): Dialect;
    get host(): string;
    get port(): number;
    get database(): string;
    private get plainConnectionOptions();
    constructor(options: PlainConnectionOptionsOrUri, logger?: Logger);
    changeHostAndPort(host: string, port: number): void;
    buildPreprocessedOptions(): Promise<PlainConnectionOptions>;
    /** Options that can be passed to the sequelize constructor */
    buildSequelizeCtorOptions(): Promise<[SequelizeOptions] | [string, SequelizeOptions]>;
    private parseDatabaseUri;
    /** Helper to fill the sequelize's options.schema  */
    private makeSequelizeSchema;
    /** Helper to fill the sequelize's options.logging */
    private makeSequelizeLogging;
    /** Helper to fill the sequelize's options.dialectOptions */
    private makeSequelizeDialectOptions;
    private computeSslMode;
}
//# sourceMappingURL=connection-options.d.ts.map