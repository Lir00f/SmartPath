"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socks_1 = require("socks");
const service_1 = __importDefault(require("./service"));
const errors_1 = require("../errors");
class SocksProxy extends service_1.default {
    constructor(proxyOptions, targetHost, targetPort) {
        super(proxyOptions.host, proxyOptions.port, targetHost, targetPort);
        this.options = proxyOptions;
    }
    async connect() {
        let socks5Client;
        try {
            socks5Client = await socks_1.SocksClient.createConnection({
                proxy: { ...this.options, type: 5 },
                command: 'connect',
                destination: { host: this.targetHost, port: this.targetPort },
                timeout: 4000,
            });
            this.addConnectedClient(socks5Client.socket);
            socks5Client.socket.on('close', () => this.destroySocketIfUnclosedAndSaveError(socks5Client.socket));
            socks5Client.socket.on('error', error => this.destroySocketIfUnclosedAndSaveError(socks5Client.socket, new errors_1.ProxyConnectError(error.message, this.debugUri)));
            const tunnel = await super.connect(socks5Client.socket);
            if (tunnel) {
                // destroy the proxy socket when the tunnel is closed or an error occurs
                // this is very important to avoid unclose database connections
                tunnel.on('close', () => this.destroySocketIfUnclosedAndSaveError(socks5Client.socket));
                tunnel.on('error', error => this.destroySocketIfUnclosedAndSaveError(socks5Client.socket, new errors_1.ProxyConnectError(error.message, this.debugUri)));
            }
            return tunnel;
        }
        catch (error) {
            let serviceError = new errors_1.ProxyConnectError(error.message, this.debugUri);
            if (error.message.includes('Socket closed') ||
                error.message.includes('Socks5 proxy rejected connection')) {
                serviceError = new errors_1.ProxyForwardError(error.message, this.debugForwardUri);
            }
            this.destroySocketIfUnclosedAndSaveError(socks5Client?.socket, serviceError);
            throw serviceError;
        }
    }
}
exports.default = SocksProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja3MtcHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ubmVjdGlvbi9zZXJ2aWNlcy9zb2Nrcy1wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlDQUFvQztBQUdwQyx3REFBZ0M7QUFFaEMsc0NBQWlFO0FBRWpFLE1BQXFCLFVBQVcsU0FBUSxpQkFBTztJQUc3QyxZQUFZLFlBQTBCLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUM1RSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQztJQUM5QixDQUFDO0lBRWtCLEtBQUssQ0FBQyxPQUFPO1FBQzlCLElBQUksWUFBeUMsQ0FBQztRQUU5QyxJQUFJO1lBQ0YsWUFBWSxHQUFHLE1BQU0sbUJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDaEQsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sRUFBRSxTQUFTO2dCQUNsQixXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDN0QsT0FBTyxFQUFFLElBQUk7YUFDZCxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FDOUQsQ0FBQztZQUNGLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUN0QyxJQUFJLENBQUMsbUNBQW1DLENBQ3RDLFlBQVksQ0FBQyxNQUFNLEVBQ25CLElBQUksMEJBQWlCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3BELENBQ0YsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFeEQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1Ysd0VBQXdFO2dCQUN4RSwrREFBK0Q7Z0JBQy9ELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FDekIsSUFBSSxDQUFDLG1DQUFtQyxDQUN0QyxZQUFZLENBQUMsTUFBTSxFQUNuQixJQUFJLDBCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUNwRCxDQUNGLENBQUM7YUFDSDtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksWUFBWSxHQUFHLElBQUksMEJBQWlCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFdkUsSUFDRSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7Z0JBQ3ZDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDLEVBQzFEO2dCQUNBLFlBQVksR0FBRyxJQUFJLDBCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzNFO1lBRUQsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDN0UsTUFBTSxZQUFZLENBQUM7U0FDcEI7SUFDSCxDQUFDO0NBQ0Y7QUExREQsNkJBMERDIn0=