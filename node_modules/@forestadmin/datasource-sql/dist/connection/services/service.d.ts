/// <reference types="node" />
import net from 'net';
export type ConnectionCallback = (socket: net.Socket) => Promise<net.Socket>;
export type StopCallback = () => Promise<void>;
export default abstract class Service {
    private linkedService;
    private readonly connectedClients;
    protected readonly errors: Error[];
    protected readonly sourceHost: string;
    protected readonly sourcePort: number;
    protected readonly targetHost: string;
    protected readonly targetPort: number;
    get error(): Error | null;
    protected get debugUri(): string;
    protected get debugForwardUri(): string;
    constructor(sourceHost: string, sourcePort: number, targetHost: string, targetPort: number);
    /** link a service */
    link(service: Service): void;
    /** stop the service by stopping the linked service and destroying all its clients. */
    stop(): Promise<void>;
    /** call the linked service connection callback */
    protected connect(socket?: net.Socket): Promise<net.Socket>;
    /** destroy the given socket if it is not closed and save the error */
    protected destroySocketIfUnclosedAndSaveError(socket?: net.Socket, error?: Error): void;
    /** register a socket as a client to be destroyed when the service is stopped */
    protected addConnectedClient(client: net.Socket): void;
}
//# sourceMappingURL=service.d.ts.map