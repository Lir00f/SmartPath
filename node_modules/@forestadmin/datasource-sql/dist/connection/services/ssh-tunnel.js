"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ssh2_1 = require("ssh2");
const service_1 = __importDefault(require("./service"));
const errors_1 = require("../errors");
class SshTunnel extends service_1.default {
    constructor(options, targetHost, targetPort) {
        super(options.host, options.port, targetHost, targetPort);
        this.clients = new Set();
        this.options = options;
    }
    async stop() {
        try {
            await super.stop();
        }
        finally {
            this.clients.forEach(client => this.endClient(client));
        }
    }
    async connect(socket) {
        const client = new ssh2_1.Client();
        // list all the clients to be able to close them all when the service is stopped
        this.clients.add(client);
        try {
            return await new Promise((resolve, reject) => {
                client.on('error', e => reject(new errors_1.SshConnectError(e.message, this.debugUri)));
                client.on('ready', async () => {
                    try {
                        resolve(await this.buildTunnel(client));
                    }
                    catch (error) {
                        reject(error);
                    }
                });
                // connect to the SSH server
                // will trigger the 'ready' event if the connection is successful
                // if the connection fails, the 'error' event will be triggered
                client.connect({ ...this.options, sock: socket });
            });
        }
        catch (error) {
            this.endClient(client);
            this.errors.push(error);
            throw error;
        }
    }
    async buildTunnel(client) {
        // tell to the SSH server to forward all the traffic to the target host and port
        return new Promise((resolve, reject) => {
            // source host and port are not used by the SSH server
            client.forwardOut('', 0, this.targetHost, this.targetPort, async (error, stream) => {
                if (error)
                    return reject(new errors_1.SshForwardError(error.message, this.debugForwardUri));
                this.addConnectedClient(stream);
                stream.on('error', e => this.destroySocketIfUnclosedAndSaveError(stream, new errors_1.SshConnectError(e.message, this.debugUri)));
                stream.on('close', () => {
                    this.destroySocketIfUnclosedAndSaveError(stream);
                    this.endClient(client);
                });
                return resolve(await super.connect(stream));
            });
        });
    }
    endClient(client) {
        client.end();
        this.clients.delete(client);
    }
}
exports.default = SshTunnel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NoLXR1bm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25uZWN0aW9uL3NlcnZpY2VzL3NzaC10dW5uZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwrQkFBOEI7QUFFOUIsd0RBQWdDO0FBRWhDLHNDQUE2RDtBQUU3RCxNQUFxQixTQUFVLFNBQVEsaUJBQU87SUFJNUMsWUFBWSxPQUFtQixFQUFFLFVBQWtCLEVBQUUsVUFBa0I7UUFDckUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFIM0MsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFJM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVRLEtBQUssQ0FBQyxJQUFJO1FBQ2pCLElBQUk7WUFDRixNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNwQjtnQkFBUztZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3hEO0lBQ0gsQ0FBQztJQUVRLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBbUI7UUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxhQUFNLEVBQUUsQ0FBQztRQUM1QixnRkFBZ0Y7UUFDaEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsSUFBSTtZQUNGLE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSx3QkFBZSxDQUFDLENBQUMsQ0FBQyxP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