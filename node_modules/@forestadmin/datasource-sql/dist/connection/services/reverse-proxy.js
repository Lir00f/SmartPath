"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = __importDefault(require("net"));
const service_1 = __importDefault(require("./service"));
/**
 * ReverseProxy is used to redirect all the database requests.
 * Sequelize does not take a socket as an argument,
 * so we need to redirect all the traffic to a new socket.
 * This is done by creating a server that will listen on a random port.
 * We change the host and port of the Sequelize options to point to the reverse proxy.
 * The reverse proxy will then redirect all the traffic to the database through the tunnel.
 */
class ReverseProxy extends service_1.default {
    get host() {
        return this.server.address().address;
    }
    get port() {
        return this.server.address().port;
    }
    constructor() {
        super(null, null, null, null);
        this.server = net_1.default.createServer(this.connect.bind(this));
    }
    start() {
        return new Promise((resolve, reject) => {
            this.server.on('error', reject);
            // By using port 0, the operating system
            // will assign an available port for the server to listen on.
            this.server.listen(0, '127.0.0.1', resolve);
        });
    }
    async stop() {
        try {
            // close all the connected clients before closing the server
            await super.stop();
        }
        finally {
            await new Promise((resolve, reject) => {
                this.server.close(e => {
                    if (e)
                        reject(e);
                    else
                        resolve();
                });
            });
        }
    }
    async connect(socket) {
        try {
            this.addConnectedClient(socket);
            socket.on('close', () => this.destroySocketIfUnclosedAndSaveError(socket));
            socket.on('error', error => this.destroySocketIfUnclosedAndSaveError(socket, error));
            const tunnel = await super.connect();
            if (tunnel)
                tunnel.pipe(socket).pipe(tunnel);
            return tunnel;
        }
        catch (error) {
            this.destroySocketIfUnclosedAndSaveError(socket, error);
            // don't throw the error to avoid crashing the server because the error is already handled
        }
    }
}
exports.default = ReverseProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZS1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25uZWN0aW9uL3NlcnZpY2VzL3JldmVyc2UtcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBc0I7QUFFdEIsd0RBQWdDO0FBRWhDOzs7Ozs7O0dBT0c7QUFDSCxNQUFxQixZQUFhLFNBQVEsaUJBQU87SUFHL0MsSUFBSSxJQUFJO1FBQ04sT0FBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBc0IsQ0FBQyxPQUFPLENBQUM7SUFDNUQsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQXNCLENBQUMsSUFBSSxDQUFDO0lBQ3pELENBQUM7SUFFRDtRQUNFLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLGFBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2hDLHdDQUF3QztZQUN4Qyw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUSxLQUFLLENBQUMsSUFBSTtRQUNqQixJQUFJO1lBQ0YsNERBQTREO1lBQzVELE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3BCO2dCQUFTO1lBQ1IsTUFBTSxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3BCLElBQUksQ0FBQzt3QkFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O3dCQUNaLE9BQU8sRUFBRSxDQUFDO2dCQUNqQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRWtCLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBa0I7UUFDakQsSUFBSTtZQUNGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMzRSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUVyRixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyQyxJQUFJLE1BQU07Z0JBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFN0MsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN4RCwwRkFBMEY7U0FDM0Y7SUFDSCxDQUFDO0NBQ0Y7QUF0REQsK0JBc0RDIn0=