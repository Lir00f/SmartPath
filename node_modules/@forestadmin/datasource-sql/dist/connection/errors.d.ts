export type ErrorSource = 'Proxy' | 'Database' | 'Ssh';
declare abstract class BaseError extends Error {
    abstract readonly source: ErrorSource;
    readonly debugUri: string;
    readonly details: string;
    protected constructor(message: string, debugUri: string, details?: string);
}
export declare class DatabaseConnectError extends BaseError {
    readonly source: ErrorSource;
    constructor(message: string, debugDatabaseUri: string, source?: ErrorSource);
}
export declare class ProxyConnectError extends BaseError {
    readonly source = "Proxy";
    constructor(message: string, debugProxyUri: string);
}
export declare class ProxyForwardError extends BaseError {
    readonly source = "Proxy";
    constructor(message: string, debugForwardedUri: string);
}
export declare class SshConnectError extends BaseError {
    readonly source: ErrorSource;
    constructor(message: string, debugSshUri: string, source?: ErrorSource);
}
export declare class SshForwardError extends BaseError {
    readonly source = "Ssh";
    constructor(message: string, debugForwardedUri: string);
}
export {};
//# sourceMappingURL=errors.d.ts.map