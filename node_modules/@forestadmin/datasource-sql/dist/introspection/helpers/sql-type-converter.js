"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
class SqlTypeConverter {
    constructor(sequelize) {
        this.sequelize = sequelize;
    }
    async convert(tableIdentifier, columnName, columnInfo) {
        switch (columnInfo.type) {
            case 'ARRAY':
                return this.getArrayType(tableIdentifier, columnName);
            case 'USER-DEFINED':
            case this.typeMatch(columnInfo.type, SqlTypeConverter.enumRegex):
                return this.getEnumType(columnInfo);
            default:
                return { type: 'scalar', subType: this.getScalarType(columnInfo.type) };
        }
    }
    /** Get the type of an enum from sequelize column description */
    getEnumType(columnInfo) {
        if (columnInfo.type === 'USER-DEFINED') {
            // Postgres enum
            return columnInfo?.special?.length > 0
                ? { type: 'enum', values: columnInfo.special }
                : // User-defined enum with no values will default to string
                    { type: 'scalar', subType: 'STRING' };
        }
        // Other SGDB
        const enumOptions = SqlTypeConverter.enumRegex.exec(columnInfo.type)?.[1];
        return { type: 'enum', values: enumOptions.replace(/'/g, '').split(',') };
    }
    /**
     * Get the type of an array from sequelize column description
     * Note that we don't need to write multiple SQL queries, because arrays are only supported by
     * Postgres
     */
    async getArrayType(tableIdentifier, columnName) {
        // Get the type of the elements in the array from the database
        const [{ udtName, dataType, charLength, schema, rawEnumValues }] = await this.sequelize.query(`SELECT
        e.udt_name AS "udtName",
        e.data_type AS "dataType",
        e.character_maximum_length as "charLength",
        (
          SELECT ns.nspname
          FROM pg_catalog.pg_namespace ns JOIN pg_catalog.pg_type t ON ns.oid = t.typnamespace
          WHERE t.typname = e.udt_name
        ) as "schema",
        (
          SELECT array_agg(en.enumlabel)
          FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum en ON t.oid = en.enumtypid
          WHERE t.typname = e.udt_name
        ) AS "rawEnumValues"
      FROM INFORMATION_SCHEMA.columns c
      LEFT JOIN INFORMATION_SCHEMA.element_types e ON (
        c.table_catalog = e.object_catalog AND
        c.table_schema = e.object_schema AND
        c.table_name = e.object_name AND
        'TABLE' = e.object_type AND
        (:schema IS NULL OR c.table_schema = :schema) AND
        c.dtd_identifier = e.collection_type_identifier
      )
      WHERE table_name = :tableName AND c.column_name = :columnName;`.replace(/\s+/g, ' '), {
            replacements: {
                tableName: tableIdentifier.tableName,
                schema: tableIdentifier.schema || null,
                columnName,
            },
            type: sequelize_1.QueryTypes.SELECT,
        });
        let subType;
        if (rawEnumValues !== null) {
            const queryInterface = this.sequelize.getQueryInterface();
            const queryGen = queryInterface.queryGenerator;
            const enumValues = queryGen.fromArray(rawEnumValues);
            subType = { type: 'enum', schema, name: udtName, values: [...enumValues].sort() };
        }
        else {
            const dataTypeWithLength = charLength ? `${dataType}(${charLength})` : dataType;
            subType = { type: 'scalar', subType: this.getScalarType(dataTypeWithLength) };
        }
        return { type: 'array', subType };
    }
    getScalarType(type) {
        const upType = type.toUpperCase();
        switch (upType) {
            case 'JSON':
                return 'JSON';
            case 'BIT(1)': // In MySQL / MariaDB / Postgres, BIT(N) is used for bitmasks
            case 'TINYINT(1)': // MYSQL bool
            case 'BIT': // MSSQL type.
            case 'BOOLEAN':
                return 'BOOLEAN';
            case 'CHARACTER VARYING':
            case 'TEXT':
            case 'NTEXT': // MSSQL type
            case this.typeContains(upType, 'TEXT'):
            case this.typeContains(upType, 'VARCHAR'):
            case this.typeContains(upType, 'CHAR'):
            case 'NVARCHAR': // NOTICE: MSSQL type
                return 'STRING';
            case this.typeStartsWith(upType, 'VARBINARY'):
            case this.typeStartsWith(upType, 'BINARY'):
            case 'TINYBLOB':
            case 'BLOB':
            case 'MEDIUMBLOB':
            case 'LONGBLOB':
            case 'BYTEA': // Postgres type
                return 'BLOB';
            case 'UNIQUEIDENTIFIER':
            case 'UUID':
                return 'UUID';
            case 'JSONB':
                return 'JSONB';
            case 'INTEGER':
            case 'SERIAL':
            case 'BIGSERIAL':
            case this.typeStartsWith(upType, 'INT'):
            case this.typeStartsWith(upType, 'SMALLINT'):
            case this.typeStartsWith(upType, 'TINYINT'):
            case this.typeStartsWith(upType, 'MEDIUMINT'):
                return 'NUMBER';
            case this.typeStartsWith(upType, 'BIGINT'):
                return 'BIGINT';
            case this.typeContains(upType, 'FLOAT'):
                return 'FLOAT';
            case 'NUMERIC':
            case 'REAL':
            case 'DOUBLE':
            case 'DOUBLE PRECISION':
            case this.typeContains(upType, 'DECIMAL'):
                return 'DOUBLE';
            case 'DATE':
                return 'DATEONLY';
            case this.typeStartsWith(upType, 'DATETIME'):
            case this.typeStartsWith(upType, 'TIMESTAMP'):
                return 'DATE';
            case 'TIME':
            case 'TIME WITHOUT TIME ZONE':
                return 'TIME';
            case 'INET':
                return 'INET';
            default:
                throw new Error(`Unsupported type: ${type}`);
        }
    }
    typeMatch(type, value) {
        return (type.match(value) || {}).input;
    }
    typeStartsWith(type, value) {
        return this.typeMatch(type, new RegExp(`^${value}.*`, 'i'));
    }
    typeContains(type, value) {
        return this.typeMatch(type, new RegExp(`${value}.*`, 'i'));
    }
}
exports.default = SqlTypeConverter;
SqlTypeConverter.enumRegex = /ENUM\((.*)\)/i;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLXR5cGUtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ludHJvc3BlY3Rpb24vaGVscGVycy9zcWwtdHlwZS1jb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBa0Q7QUFLbEQsTUFBcUIsZ0JBQWdCO0lBSW5DLFlBQVksU0FBb0I7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQ1gsZUFBeUMsRUFDekMsVUFBa0IsRUFDbEIsVUFBMkI7UUFFM0IsUUFBUSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEtBQUssT0FBTztnQkFDVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRXhELEtBQUssY0FBYyxDQUFDO1lBQ3BCLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztnQkFDOUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXRDO2dCQUNFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQzNFO0lBQ0gsQ0FBQztJQUVELGdFQUFnRTtJQUN4RCxXQUFXLENBQUMsVUFBMkI7UUFDN0MsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtZQUN0QyxnQkFBZ0I7WUFDaEIsT0FBTyxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sR0FBRyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO2dCQUM5QyxDQUFDLENBQUMsMERBQTBEO29C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