import { Sequelize } from 'sequelize';
import { SequelizeColumn, SequelizeTableIdentifier } from '../type-overrides';
import { ColumnType } from '../types';
export default class SqlTypeConverter {
    private static readonly enumRegex;
    private readonly sequelize;
    constructor(sequelize: Sequelize);
    convert(tableIdentifier: SequelizeTableIdentifier, columnName: string, columnInfo: SequelizeColumn): Promise<ColumnType>;
    /** Get the type of an enum from sequelize column description */
    private getEnumType;
    /**
     * Get the type of an array from sequelize column description
     * Note that we don't need to write multiple SQL queries, because arrays are only supported by
     * Postgres
     */
    private getArrayType;
    private getScalarType;
    private typeMatch;
    private typeStartsWith;
    private typeContains;
}
//# sourceMappingURL=sql-type-converter.d.ts.map