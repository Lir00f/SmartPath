"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
const default_value_parser_1 = __importDefault(require("./helpers/default-value-parser"));
const sql_type_converter_1 = __importDefault(require("./helpers/sql-type-converter"));
class Introspector {
    static async introspect(sequelize, logger) {
        const tableNamesAndSchemas = await this.getTableNames(sequelize);
        const validTableNames = tableNamesAndSchemas.filter(name => sequelize.getDialect() !== 'mssql' || !name.tableName.includes('.'));
        if (validTableNames.length < tableNamesAndSchemas.length) {
            const diff = tableNamesAndSchemas.filter(name => !validTableNames.includes(name));
            logger?.('Warn', `Skipping table(s): ${diff
                .map(tableNameAndSchema => `'${tableNameAndSchema.tableName}'`)
                .join(', ')}. MSSQL tables with dots are not supported`);
        }
        const promises = validTableNames.map(name => this.getTable(sequelize, logger, name));
        const tables = await Promise.all(promises);
        this.sanitizeInPlace(tables);
        return tables;
    }
    /** Get names of all tables in the public schema of the db */
    static async getTableNames(sequelize) {
        const tableIdentifiers = await sequelize
            .getQueryInterface()
            .showAllTables();
        const requestedSchema = sequelize.options.schema || this.getDefaultSchema(sequelize);
        // Sometimes sequelize returns only strings,
        // and sometimes objects with a tableName and schema property.
        // @see https://github.com/sequelize/sequelize/blob/main/src/dialects/mariadb/query.js#L295
        return (tableIdentifiers
            .map((tableIdentifier) => typeof tableIdentifier === 'string'
            ? { tableName: tableIdentifier, schema: requestedSchema }
            : {
                schema: tableIdentifier.schema || requestedSchema,
                tableName: tableIdentifier.tableName,
            })
            // MSSQL returns all tables, not filtered by schema
            .filter(identifier => identifier.schema === requestedSchema));
    }
    static getDefaultSchema(sequelize) {
        switch (sequelize.getDialect()) {
            case 'postgres':
                return 'public';
            case 'mssql':
                return 'dbo';
            // MariaDB returns the database name as "schema" in table identifiers
            case 'mariadb':
            case 'mysql':
                return sequelize.getDatabaseName();
            default:
                return undefined;
        }
    }
    static getTableIdentifier(tableIdentifier, sequelize) {
        switch (sequelize.getDialect()) {
            case 'postgres':
            case 'mssql':
            case 'sqlite':
                return tableIdentifier;
            case 'mariadb':
            case 'mysql':
            default:
                return { tableName: tableIdentifier.tableName };
        }
    }
    /** Instrospect a single table */
    static async getTable(sequelize, logger, tableIdentifier) {
        const queryInterface = sequelize.getQueryInterface();
        // Sequelize is not consistent in the way it handles table identifiers either when it returns
        // it, when it uses it internally, or when it is passed as an argument.
        // Plus it has some bugs with schema handling in postgresql that forces us to be sure that
        // the table identifier is correct on our side
        const tableIdentifierForQuery = Introspector.getTableIdentifier(tableIdentifier, sequelize);
        const [columnDescriptions, tableIndexes, tableReferences] = await Promise.all([
            queryInterface.describeTable(tableIdentifierForQuery),
            queryInterface.showIndex(tableIdentifierForQuery),
            queryInterface.getForeignKeyReferencesForTable(tableIdentifierForQuery),
        ]);
        await this.detectBrokenRelationship(tableIdentifierForQuery, sequelize, tableReferences, logger);
        const columns = await Promise.all(Object.entries(columnDescriptions).map(async ([name, description]) => {
            const references = tableReferences.filter(
            // There is a bug right now with sequelize on postgresql: returned association
            // are not filtered on the schema. So we have to filter them manually.
            // Should be fixed with Sequelize v7
            r => r.columnName === name && r.tableSchema === tableIdentifier.schema);
            const options = { name, description, references };
            return this.getColumn(sequelize, logger, tableIdentifier, options);
        }));
        return {
            name: tableIdentifierForQuery.tableName,
            schema: tableIdentifierForQuery.schema,
            columns: columns.filter(Boolean),
            unique: tableIndexes
                .filter(i => i.unique || i.primary)
                .map(i => i.fields.map(f => f.attribute)),
        };
    }
    static async getColumn(sequelize, logger, tableIdentifier, options) {
        const { name, description, references } = options;
        const dialect = sequelize.getDialect();
        const typeConverter = new sql_type_converter_1.default(sequelize);
        try {
            const type = await typeConverter.convert(tableIdentifier, name, description);
            const parser = new default_value_parser_1.default(dialect);
            // Workaround autoincrement flag not being properly set when using postgres
            const autoIncrement = Boolean(description.autoIncrement || description.defaultValue?.match?.(/^nextval\(.+\)$/));
            return {
                type,
                autoIncrement,
                defaultValue: autoIncrement ? null : parser.parse(description.defaultValue, type),
                isLiteralDefaultValue: autoIncrement
                    ? false
                    : parser.isLiteral(description.defaultValue, type),
                name,
                allowNull: description.allowNull,
                primaryKey: description.primaryKey,
                constraints: references.map(r => ({
                    table: r.referencedTableName,
                    column: r.referencedColumnName,
                })),
            };
        }
        catch (e) {
            logger?.('Warn', `Skipping column ${tableIdentifier.tableName}.${name} (${e.message})`);
        }
    }
    /**
     * Remove references to entities that are not present in the schema
     * (happens when we skip entities because of errors)
     */
    static sanitizeInPlace(tables) {
        for (const table of tables) {
            // Remove unique indexes which depennd on columns that are not present in the table.
            table.unique = table.unique.filter(unique => unique.every(column => table.columns.find(c => c.name === column)));
            for (const column of table.columns) {
                // Remove references to tables that are not present in the schema.
                column.constraints = column.constraints.filter(constraint => {
                    const refTable = tables.find(t => t.name === constraint.table);
                    const refColumn = refTable?.columns.find(c => c.name === constraint.column);
                    return refTable && refColumn;
                });
            }
        }
    }
    static async detectBrokenRelationship(tableIdentifier, sequelize, tableReferences, logger) {
        let constraintNamesForForeignKey = [];
        const dialect = sequelize.getDialect();
        if (dialect === 'sqlite') {
            constraintNamesForForeignKey = await sequelize.query(`SELECT "from" as constraint_name, :tableName as table_name
        from pragma_foreign_key_list(:tableName);`, {
                replacements: { tableName: tableIdentifier.tableName },
                type: sequelize_1.QueryTypes.SELECT,
            });
        }
        else {
            constraintNamesForForeignKey = await sequelize.query(`
        SELECT constraint_name, table_name
          FROM information_schema.table_constraints
          WHERE table_name = :tableName 
            AND constraint_type = 'FOREIGN KEY'
            AND (:schema IS NULL OR table_schema = :schema);
        `, {
                replacements: {
                    tableName: tableIdentifier.tableName,
                    schema: tableIdentifier.schema || null,
                },
                type: sequelize_1.QueryTypes.SELECT,
            });
        }
        this.logBrokenRelationship(constraintNamesForForeignKey, tableReferences, logger);
    }
    static logBrokenRelationship(constraintNamesForForeignKey, tableReferences, logger) {
        if (constraintNamesForForeignKey.length !== tableReferences.length) {
            const constraintNames = new Set(constraintNamesForForeignKey.map(c => ({ constraint_name: c.constraint_name, table_name: c.table_name })));
            tableReferences.forEach(({ constraintName }) => {
                constraintNames.forEach(obj => {
                    if (obj.constraint_name === constraintName) {
                        constraintNames.delete(obj);
                    }
                });
            });
            constraintNames.forEach(obj => {
                logger?.('Error', 
                // eslint-disable-next-line max-len
                `Failed to load constraints on relation '${obj.constraint_name}' on table '${obj.table_name}'. The relation will be ignored.`);
            });
        }
    }
}
exports.default = Introspector;
//# sourceMappingURL=data:application/json;base64,