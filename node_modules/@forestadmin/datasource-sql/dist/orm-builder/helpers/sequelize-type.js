"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable max-len */
/* eslint-disable max-classes-per-file */
const sequelize_1 = require("sequelize");
class SequelizeTypeFactory {
    static makeType(dialect, type, table, columnName) {
        switch (type.type) {
            case 'scalar':
                if (sequelize_1.DataTypes[type.subType])
                    return sequelize_1.DataTypes[type.subType];
                throw new Error(`Unexpected type: ${type.subType}`);
            case 'enum':
                // Use a custom type only if the name is not the default one.
                // This should prevent side-effects on most cases if the custom type fails to mimic the
                // default one and cause issues, while still allowing to use custom types when required.
                return dialect === 'postgres' && type.name && type.name !== `enum_${table}_${columnName}`
                    ? this.makeCustomEnumType(type.schema, type.name, type.values)
                    : sequelize_1.DataTypes.ENUM(...type.values);
            case 'array':
                return sequelize_1.DataTypes.ARRAY(this.makeType(dialect, type.subType, table, columnName));
            default:
                throw new Error('Invalid type');
        }
    }
    /**
     * This workaround is needed because when inserting records in a table with an Array<Enum> column,
     * sequelize will try to cast the value to the enum type.
     *
     * This will fail if the database that sequelize is connected to was not initially created by
     * sequelize, because the enum type is unlikely to have the name that sequelize expects.
     *
     * @see https://community.forestadmin.com/t/postgresql-enum-type-does-not-exist-error-wrong-enum-type-name/5931
     * @see https://github.com/sequelize/sequelize/blob/v6.28.0/src/dialects/postgres/data-types.js#L491
     * @see https://github.com/sequelize/sequelize/blob/v6.28.0/src/utils.js#L555
     */
    static makeCustomEnumType(schema, name, values) {
        var _a;
        const key = `${schema ? `"${schema}".` : ''}"${name}"`;
        const Type = (_a = class extends sequelize_1.DataTypes.ABSTRACT {
                constructor() {
                    super();
                    this.isDataSourceSqlEnum = true;
                    this.key = key;
                    // Steal the validate method from the ENUM type
                    this.validate = sequelize_1.DataTypes.ENUM.prototype.validate;
                    this.values = values;
                    this.options = { values };
                }
            },
            // Markers to tell @forestadmin/datasource-sequelize to consider this type as an enum
            // when transforming sequelize models to forest collections.
            // Otherwise, we would get the "Skipping column" error
            _a.isDataSourceSqlEnum = true,
            // Setting this tells sequelize the name of the type in the database.
            // This is used, most notably, when casting values (which happens when the enum is used in
            // arrays)
            _a.key = key,
            _a);
        return new Type();
    }
}
exports.default = SequelizeTypeFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VxdWVsaXplLXR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvb3JtLWJ1aWxkZXIvaGVscGVycy9zZXF1ZWxpemUtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1Qix5Q0FBeUM7QUFDekMseUNBQXNDO0FBS3RDLE1BQXFCLG9CQUFvQjtJQUN2QyxNQUFNLENBQUMsUUFBUSxDQUNiLE9BQWUsRUFDZixJQUFnQixFQUNoQixLQUFhLEVBQ2IsVUFBa0I7UUFFbEIsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2pCLEtBQUssUUFBUTtnQkFDWCxJQUFJLHFCQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFBRSxPQUFPLHFCQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUV0RCxLQUFLLE1BQU07Z0JBQ1QsNkRBQTZEO2dCQUM3RCx1RkFBdUY7Z0JBQ3ZGLHdGQUF3RjtnQkFDeEYsT0FBTyxPQUFPLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEtBQUssSUFBSSxVQUFVLEVBQUU7b0JBQ3ZGLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQzlELENBQUMsQ0FBQyxxQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVyQyxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxxQkFBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBRWxGO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNLLE1BQU0sQ0FBQyxrQkFBa0IsQ0FDL0IsTUFBYyxFQUNkLElBQVksRUFDWixNQUFnQjs7UUFFaEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUV2RCxNQUFNLElBQUksU0FBRyxLQUFNLFNBQVEscUJBQVMsQ0FBQyxRQUFRO2dCQWtCM0M7b0JBQ0UsS0FBSyxFQUFFLENBQUM7b0JBZEQsd0JBQW1CLEdBQUcsSUFBSSxDQUFDO29CQU0zQixRQUFHLEdBQUcsR0FBRyxDQUFDO29CQWNuQiwrQ0FBK0M7b0JBQy9DLGFBQVEsR0FBRyxxQkFBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO29CQUwzQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztvQkFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUM1QixDQUFDO2FBSUY7WUExQkMscUZBQXFGO1lBQ3JGLDREQUE0RDtZQUM1RCxzREFBc0Q7WUFDdEMsc0JBQW1CLEdBQUcsSUFBSztZQUczQyxxRUFBcUU7WUFDckUsMEZBQTBGO1lBQzFGLFVBQVU7WUFDTSxNQUFHLEdBQUcsR0FBSTtlQWlCM0IsQ0FBQztRQUVGLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUE3RUQsdUNBNkVDIn0=