"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const sequelize_1 = require("sequelize");
const aggregation_1 = __importDefault(require("./utils/aggregation"));
const error_handler_1 = __importDefault(require("./utils/error-handler"));
const model_to_collection_schema_converter_1 = __importDefault(require("./utils/model-to-collection-schema-converter"));
const query_converter_1 = __importDefault(require("./utils/query-converter"));
const serializer_1 = __importDefault(require("./utils/serializer"));
class SequelizeCollection extends datasource_toolkit_1.BaseCollection {
    constructor(name, datasource, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    model, logger) {
        if (!model)
            throw new Error('Invalid (null) model instance.');
        super(name, datasource, {
            sequelize: model.sequelize,
            model,
            rawQuery: async (sql, replacements) => {
                const result = await model.sequelize.query(sql, {
                    type: sequelize_1.QueryTypes.RAW,
                    plain: false,
                    raw: true,
                    replacements,
                });
                return result?.[0];
            },
        });
        this.model = model;
        this.col = this.model.sequelize.col;
        this.fn = this.model.sequelize.fn;
        this.aggregationUtils = new aggregation_1.default(this.model);
        this.queryConverter = new query_converter_1.default(this.model);
        const modelSchema = model_to_collection_schema_converter_1.default.convert(this.model, logger);
        this.enableCount();
        this.addFields(modelSchema.fields);
        this.addSegments(modelSchema.segments);
    }
    async create(caller, data) {
        const records = await (0, error_handler_1.default)('create', () => this.model.bulkCreate(data));
        return records.map(record => serializer_1.default.serialize(record.get({ plain: true })));
    }
    async list(caller, filter, projection) {
        const query = {
            attributes: projection.columns,
            where: this.queryConverter.getWhereFromConditionTree(filter.conditionTree),
            include: this.queryConverter.getIncludeFromProjection(
            // Bugfix [CU-860rc94dq](https://app.clickup.com/t/860rc94dq)
            // When we provide sequelize with an include which has empty `.attributes` in it, it stops
            // there and doesn't go further in the include tree.
            // To ensure that no `.attributes` are not empty, we add the pk of each collection in the
            // projection.
            //
            // include: [{
            //   association: 'users',
            //   attributes: [],
            //   include: { association: 'posts', attributes: ['i_want_this_field'] }
            // }]
            projection.withPks(this), new datasource_toolkit_1.Projection().union(filter.conditionTree?.projection, filter.sort?.projection)),
            limit: filter.page?.limit,
            offset: filter.page?.skip,
            order: this.queryConverter.getOrderFromSort(filter.sort),
            subQuery: false,
        };
        const records = await this.model.findAll(query);
        const rawRecords = records.map(record => serializer_1.default.serialize(record.get({ plain: true })));
        // Use projection to filter out the unwanted primary keys that were added to the projection
        // so that sequelize can do its job.
        return projection.apply(rawRecords);
    }
    async update(caller, filter, patch) {
        const options = {
            where: await this.queryConverter.getWhereFromConditionTreeToByPassInclude(filter.conditionTree),
            fields: Object.keys(patch),
        };
        await (0, error_handler_1.default)('update', () => this.model.update(patch, options));
    }
    async delete(caller, filter) {
        const options = {
            where: await this.queryConverter.getWhereFromConditionTreeToByPassInclude(filter.conditionTree),
        };
        await (0, error_handler_1.default)('delete', () => this.model.destroy(options));
    }
    async aggregate(caller, filter, aggregation, limit) {
        let aggregationField = aggregation.field;
        let aggregationFieldSchema;
        if (aggregation.operation === 'Count' || !aggregationField) {
            aggregationField = '*';
        }
        else {
            aggregationField = this.aggregationUtils.quoteField(aggregationField);
            aggregationFieldSchema = datasource_toolkit_1.CollectionUtils.getFieldSchema(this, aggregation.field);
        }
        const aggregationFunction = this.fn(aggregation.operation.toUpperCase(), this.col(aggregationField));
        const aggregationAttribute = [
            aggregationFunction,
            this.aggregationUtils.aggregateFieldName,
        ];
        const { groups, attributes } = this.aggregationUtils.getGroupAndAttributesFromAggregation(aggregation.groups);
        const query = {
            attributes: [...attributes, aggregationAttribute],
            group: groups,
            where: this.queryConverter.getWhereFromConditionTree(filter.conditionTree),
            include: this.queryConverter.getIncludeFromProjection(new datasource_toolkit_1.Projection(), aggregation.projection.union(filter.conditionTree?.projection)),
            limit,
            order: [this.aggregationUtils.getOrder(aggregationFunction)],
            subQuery: false,
            raw: true,
        };
        const rows = await this.model.findAll(query);
        return this.aggregationUtils.computeResult(rows, aggregation.groups, !aggregationFieldSchema || aggregationFieldSchema?.columnType === 'Number');
    }
}
exports.default = SequelizeCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBYXlDO0FBQ3pDLHlDQU9tQjtBQUVuQixzRUFBbUQ7QUFDbkQsMEVBQWlEO0FBQ2pELHdIQUEwRTtBQUMxRSw4RUFBcUQ7QUFDckQsb0VBQTRDO0FBRTVDLE1BQXFCLG1CQUFvQixTQUFRLG1DQUFjO0lBUzdELFlBQ0UsSUFBWSxFQUNaLFVBQXNCO0lBQ3RCLDhEQUE4RDtJQUM5RCxLQUE2QixFQUM3QixNQUFlO1FBRWYsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFFOUQsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDdEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLEtBQUs7WUFDTCxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQVcsRUFBRSxZQUFnQyxFQUFFLEVBQUU7Z0JBQ2hFLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO29CQUM5QyxJQUFJLEVBQUUsc0JBQVUsQ0FBQyxHQUFHO29CQUNwQixLQUFLLEVBQUUsS0FBSztvQkFDWixHQUFHLEVBQUUsSUFBSTtvQkFDVCxZQUFZO2lCQUNiLENBQUMsQ0FBQztnQkFFSCxPQUFPLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUNwQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUVsQyxJ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