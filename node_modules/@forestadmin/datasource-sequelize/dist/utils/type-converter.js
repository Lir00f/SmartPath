"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
class TypeConverter {
    static getColumnTypeFromDataType(dataType) {
        // See postgres enum handling in @datasource-sql
        if (dataType.isDataSourceSqlEnum)
            return 'Enum';
        switch (dataType.key) {
            case sequelize_1.DataTypes.BLOB.key:
                return 'Binary';
            case sequelize_1.DataTypes.BOOLEAN.key:
                return 'Boolean';
            case sequelize_1.DataTypes.DATE.key:
            case sequelize_1.DataTypes.NOW.key:
                return 'Date';
            case sequelize_1.DataTypes.DATEONLY.key:
                return 'Dateonly';
            case sequelize_1.DataTypes.ENUM.key:
                return 'Enum';
            case sequelize_1.DataTypes.JSON.key:
            case sequelize_1.DataTypes.JSONB.key:
                return 'Json';
            case sequelize_1.DataTypes.BIGINT.key:
            case sequelize_1.DataTypes.DECIMAL.key:
            case sequelize_1.DataTypes.DOUBLE.key:
            case sequelize_1.DataTypes.FLOAT.key:
            case sequelize_1.DataTypes.INTEGER.key:
            case sequelize_1.DataTypes.MEDIUMINT.key:
            case sequelize_1.DataTypes.NUMBER.key:
            case sequelize_1.DataTypes.REAL.key:
            case sequelize_1.DataTypes.SMALLINT.key:
            case sequelize_1.DataTypes.TINYINT.key:
                return 'Number';
            case sequelize_1.DataTypes.CHAR.key:
            case sequelize_1.DataTypes.CITEXT.key:
            case sequelize_1.DataTypes.STRING.key:
            case sequelize_1.DataTypes.TEXT.key:
                return 'String';
            case sequelize_1.DataTypes.TIME.key:
                return 'Time';
            case sequelize_1.DataTypes.UUID.key:
            case sequelize_1.DataTypes.UUIDV1.key:
            case sequelize_1.DataTypes.UUIDV4.key:
                return 'Uuid';
            default:
                throw new Error(`Unsupported data type: "${dataType}"`);
        }
    }
    static fromDataType(dataType) {
        if (dataType.key === sequelize_1.DataTypes.ARRAY.key) {
            const arrayDataType = dataType;
            return [TypeConverter.fromDataType(arrayDataType.type)];
        }
        return TypeConverter.getColumnTypeFromDataType(dataType);
    }
    static operatorsForColumnType(columnType) {
        const result = ['Present', 'Missing'];
        const equality = ['Equal', 'NotEqual', 'In', 'NotIn'];
        if (typeof columnType === 'string') {
            const orderables = ['LessThan', 'GreaterThan'];
            const strings = ['Like', 'ILike', 'NotContains'];
            if (['Boolean', 'Binary', 'Enum', 'Uuid'].includes(columnType)) {
                result.push(...equality);
            }
            if (['Date', 'Dateonly', 'Number'].includes(columnType)) {
                result.push(...equality, ...orderables);
            }
            if (['String'].includes(columnType)) {
                result.push(...equality, ...orderables, ...strings);
            }
        }
        if (Array.isArray(columnType)) {
            result.push(...equality, 'IncludesAll');
        }
        return new Set(result);
    }
}
exports.default = TypeConverter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvdHlwZS1jb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx5Q0FBcUY7QUFJckYsTUFBcUIsYUFBYTtJQUN4QixNQUFNLENBQUMseUJBQXlCLENBQUMsUUFBMEI7UUFDakUsZ0RBQWdEO1FBQ2hELElBQUssUUFBOEMsQ0FBQyxtQkFBbUI7WUFBRSxPQUFPLE1BQU0sQ0FBQztRQUV2RixRQUFRLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDcEIsS0FBSyxxQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHO2dCQUNyQixPQUFPLFFBQVEsQ0FBQztZQUNsQixLQUFLLHFCQUFTLENBQUMsT0FBTyxDQUFDLEdBQUc7Z0JBQ3hCLE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUsscUJBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3hCLEtBQUsscUJBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRztnQkFDcEIsT0FBTyxNQUFNLENBQUM7WUFDaEIsS0FBSyxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHO2dCQUN6QixPQUFPLFVBQVUsQ0FBQztZQUNwQixLQUFLLHFCQUFTLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ3JCLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLEtBQUsscUJBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3hCLEtBQUsscUJBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDdEIsT0FBTyxNQUFNLENBQUM7WUFDaEIsS0FBSyxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDMUIsS0FBSyxxQkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDM0IsS0FBSyxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDMUIsS0FBSyxxQkFBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDekIsS0FB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