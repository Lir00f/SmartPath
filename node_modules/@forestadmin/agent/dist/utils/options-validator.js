"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const forestadmin_client_1 = __importDefault(require("@forestadmin/forestadmin-client"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const DEFAULT_MINIMUM_CACHE_DURATION = 60;
// One year cache duration when using events
const DEFAULT_CACHE_DURATION_WITH_EVENTS = 31560000;
class OptionsValidator {
    static withDefaults(options) {
        const copyOptions = { ...options };
        const defaultLogger = (level, data) => {
            const loggerLevel = options.loggerLevel ?? 'Info';
            const levels = Object.keys(this.loggerPrefix);
            if (levels.indexOf(level) >= levels.indexOf(loggerLevel)) {
                console.error(OptionsValidator.loggerPrefix[level], data);
            }
        };
        copyOptions.logger = copyOptions.logger || defaultLogger;
        copyOptions.schemaPath = copyOptions.schemaPath || '.forestadmin-schema.json';
        copyOptions.forestServerUrl = copyOptions.forestServerUrl || 'https://api.forestadmin.com';
        copyOptions.typingsMaxDepth = copyOptions.typingsMaxDepth ?? 5;
        copyOptions.prefix = copyOptions.prefix || '';
        copyOptions.loggerLevel = copyOptions.loggerLevel || 'Info';
        copyOptions.skipSchemaUpdate = copyOptions.skipSchemaUpdate || false;
        copyOptions.instantCacheRefresh = copyOptions.instantCacheRefresh ?? true;
        copyOptions.maxBodySize = copyOptions.maxBodySize || '50mb';
        if (copyOptions.instantCacheRefresh && copyOptions.permissionsCacheDurationInSeconds) {
            copyOptions.logger('Warn', 'ignoring options.permissionsCacheDurationInSeconds: when using ' +
                'options.instantCacheRefresh=true permissions caches are instantly refreshed');
        }
        if (copyOptions.skipSchemaUpdate && copyOptions.experimental) {
            copyOptions.logger('Warn', 'options.skipSchemaUpdate=true is incompatible with options.experimental');
        }
        // When using the event source to refresh cache we set a one year cache duration
        copyOptions.permissionsCacheDurationInSeconds = copyOptions.instantCacheRefresh
            ? DEFAULT_CACHE_DURATION_WITH_EVENTS
            : copyOptions.permissionsCacheDurationInSeconds ?? DEFAULT_MINIMUM_CACHE_DURATION * 15;
        if (copyOptions.permissionsCacheDurationInSeconds < DEFAULT_MINIMUM_CACHE_DURATION) {
            copyOptions.permissionsCacheDurationInSeconds = DEFAULT_MINIMUM_CACHE_DURATION;
            copyOptions.logger('Warn', 'ignoring options.permissionsCacheDurationInSeconds: ' +
                `minimum value is ${DEFAULT_MINIMUM_CACHE_DURATION} seconds`);
        }
        copyOptions.forestAdminClient =
            copyOptions.forestAdminClient ||
                (0, forestadmin_client_1.default)({
                    envSecret: copyOptions.envSecret,
                    forestServerUrl: copyOptions.forestServerUrl,
                    logger: copyOptions.logger,
                    permissionsCacheDurationInSeconds: copyOptions.permissionsCacheDurationInSeconds,
                    instantCacheRefresh: copyOptions.instantCacheRefresh,
                });
        return {
            loggerLevel: 'Info',
            ...copyOptions,
        };
    }
    static validate(options) {
        OptionsValidator.checkForestServerOptions(options);
        OptionsValidator.checkAuthOptions(options);
        OptionsValidator.checkOtherOptions(options);
        return options;
    }
    static checkForestServerOptions(options) {
        if (typeof options.envSecret !== 'string' || !/^[0-9a-f]{64}$/.test(options.envSecret)) {
            throw new Error('options.envSecret is invalid. You can retrieve its value from ' +
                'https://www.forestadmin.com');
        }
        if (!OptionsValidator.isUrl(options.forestServerUrl)) {
            throw new Error('options.forestServerUrl is invalid. It should contain an URL ' +
                '(i.e. "https://api.forestadmin.com")');
        }
        if (!OptionsValidator.isExistingPath(options.schemaPath)) {
            throw new Error('options.schemaPath is invalid. It should contain a relative filepath ' +
                'where the schema should be loaded/updated (i.e. "./.forestadmin-schema.json")');
        }
        if (options.typingsPath && !OptionsValidator.isExistingPath(options.typingsPath)) {
            throw new Error('options.typingsPath is invalid. It should contain a relative filepath ' +
                'where the schema should be loaded/updated (i.e. "./src/typings.ts")');
        }
    }
    static checkAuthOptions(options) {
        if (typeof options.authSecret !== 'string') {
            throw new Error('options.authSecret is invalid. Any long random string should work ' +
                '(i.e. "OfpssLrbgF3P4vHJTTpb"');
        }
    }
    static checkOtherOptions(options) {
        if (typeof options.prefix !== 'string' || !/^[-~/\w]*$/i.test(options.prefix)) {
            throw new Error('options.prefix is invalid. It should contain the prefix on which ' +
                'forest admin routes should be mounted (i.e. "/api/v1")');
        }
    }
    static isExistingPath(string) {
        if (typeof string !== 'string') {
            return false;
        }
        const parsed = path_1.default.parse(string);
        return parsed.dir.length ? (0, fs_1.existsSync)(parsed.dir) : true;
    }
    static isUrl(string) {
        if (typeof string !== 'string') {
            return false;
        }
        try {
            const url = new URL(string);
            return url.protocol === 'http:' || url.protocol === 'https:';
        }
        catch (_) {
            return false;
        }
    }
}
exports.default = OptionsValidator;
OptionsValidator.loggerPrefix = {
    Debug: '\x1b[34mdebug:\x1b[0m',
    Info: '\x1b[32minfo:\x1b[0m',
    Warn: '\x1b[33mwarning:\x1b[0m',
    Error: '\x1b[31merror:\x1b[0m',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy12YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvb3B0aW9ucy12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5RkFBc0U7QUFDdEUsMkJBQWdDO0FBQ2hDLGdEQUF3QjtBQUl4QixNQUFNLDhCQUE4QixHQUFHLEVBQUUsQ0FBQztBQUMxQyw0Q0FBNEM7QUFDNUMsTUFBTSxrQ0FBa0MsR0FBRyxRQUFRLENBQUM7QUFFcEQsTUFBcUIsZ0JBQWdCO0lBUW5DLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBcUI7UUFDdkMsTUFBTSxXQUFXLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDO1FBRW5DLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3BDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDO1lBQ2xELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTlDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUMsQ0FBQztRQUVGLFdBQVcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQUM7UUFDekQsV0FBVyxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxJQUFJLDBCQUEwQixDQUFDO1FBQzlFLFdBQVcsQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDLGVBQWUsSUFBSSw2QkFBNkIsQ0FBQztRQUMzRixXQUFXLENBQUMsZUFBZSxHQUFHLFdB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